

//暴力方法 时间O(n2),空间O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {0, 0};
    }
};

//使用hashtable,时间O(n),空间O(n)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        unordered_map<int, int> hashtable;
        for(int i = 0; i < n; i++){
            auto it = hashtable.find(target-nums[i]);
            if(it != hashtable.end()){
                return {i, it->second};
            }
            hashtable[nums[i]] = i; //将当前元素插入哈希表
        }
        return {};
    }
};
