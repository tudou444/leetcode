//归并排序的应用，解决问题的关键在于“并”时的答案计算（相等时先移动左指针，将右指针移动的距离作为权值加到答案）
class Solution {
    vector<int> temp;
    int mergeSort(vector<int>& nums, int left, int right){
        if(left >= right) return 0;
        int mid = left + ((right-left)>>2);
        int ans = mergeSort(nums, left, mid) + mergeSort(nums, mid+1, right);
        int p1 = left, p2 = mid + 1;
        int cnt = 0; //用于给临时数组计数
        while(p1 <= mid && p2 <= right){
            //这里的等于是必须的，不然在出现相等数据时右指针的偏移会计算错误
            (nums[p1] <= nums[p2]) ? ans += (p2 - (mid+1)) : ans += 0;
            temp[cnt++] = (nums[p1] <= nums[p2]) ? nums[p1++] : nums[p2++]; //相等时先移动左指针
        }
        while(p1 <= mid){
            temp[cnt++] = nums[p1++];
            ans += (p2 - (mid+1));
        }
        while(p2 <= right){
            temp[cnt++] = nums[p2++];
        }
        for(int i = 0; i < right-left+1; i++){
            nums[left + i] = temp[i];
        }
        return ans;
    }
public:
    int reversePairs(vector<int>& record) {
        int n = record.size();
        temp.resize(n, 0);
        return mergeSort(record, 0, n-1);
    }
};
