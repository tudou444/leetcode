//最优解，利用数组下标+1表示可能的正整数.时间O（n）空间O（1）
class Solution {
public:
    int abs(int a){
        return a > 0 ? a : -a;
    }
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        for(int i = 0; i < n; i++){
            if(nums[i] <= 0 || nums[i] > n){
                nums[i] = n+1; //赋一个非法的正整数，这样变为负数可以表示下标对应的正整数出现过
            }
        }
        for(int i = 0; i < n; i++){
            //每一处abs都不能少
            if(abs(nums[i]) > 0 && abs(nums[i]) <= n){ //[1,n]
                if(nums[abs(nums[i]) - 1] > 0){  //[0,n-1]
                    nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1];
                }
            }
        }
        for(int i = 0; i < n; i++){
            if(nums[i] > 0){
                return i+1;
            }
        }
        return n+1;
    }
};



//2018年408算法题，满分解法
//使用辅助数组，空间换时间，时间O（n）空间O（n）
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        int* temp = new int[n]{}; //temp[i]存储数字i+1的出现次数
        for(int i = 0; i < n; i++){
            if(nums[i] > 0 && nums[i] <= n){
                temp[nums[i]-1]++;
            }
        }
        for(int i = 0; i < n; i++){
            if(temp[i] == 0){
                return i+1;
            }
        }
        return n+1;
    }
};
