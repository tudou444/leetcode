/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
//利用哈希表，时间O（n）空间O（n），快速通过笔试题目
class Solution {
public:
    Node* copyRandomList(Node* head) {
        unordered_map<Node*, Node*> map;
        Node* cur = head;
        while(cur != nullptr){
            map[cur] = new Node(cur->val);
            cur = cur->next;
        }
        cur = head;
        while(cur != nullptr){
            map[cur]->next = map[cur->next];
            map[cur]->random = map[cur->random];
            cur = cur->next;
        }
        return map[head];
    }
};


/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
//迭代法，时间O（n）空间O（1）
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == nullptr){
            return nullptr;
        }
        //1->2->3
        //1->1'->2
        Node* cur = head;
        Node* next = nullptr;
        Node* curCopy = nullptr;
        while(cur != nullptr){
            next = cur->next;
            cur->next = new Node(cur->val);
            cur->next->next = next;
            cur = next;
        }
        //设置random指针
        cur = head;
        while(cur != nullptr){
            next = cur->next->next;
            curCopy = cur->next;
            curCopy->random = cur->random == nullptr ? nullptr : cur->random->next;
            cur = next;
        }
        Node* ans = head->next;
        //分割链表
        cur = head;
        while(cur != nullptr){
            next = cur->next->next;
            curCopy = cur->next;
            cur->next = next;
            curCopy->next = next == nullptr ? nullptr : next->next;
            cur = next;
        }
        return ans;
    }
};
