/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //中序遍历递归，没有任何难度，时间O(n)空间O（n）
class Solution {
private:
    vector<int> ans;
    void inorderRecur(TreeNode* head){
        if(!head) return;
        inorderRecur(head->left);
        ans.emplace_back(head->val);
        inorderRecur(head->right);
    }

public:
    vector<int> inorderTraversal(TreeNode* root) {
        inorderRecur(root);
        return ans;
    }
};

//中序遍历迭代写法，需要辅助栈，一次性将左边界全部入栈，栈顶元素出栈后将其右孩子的左边界入栈
//重复上述过程直至栈空。时间O（n）空间O（n）
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        stack<TreeNode*> s;
        TreeNode* cur = root;
        while(cur || !s.empty()){
            if(cur){
                s.push(cur);
                cur = cur->left;
            }else{
                cur = s.top();
                s.pop();
                ans.emplace_back(cur->val);
                cur = cur->right;
            }
        }
        return ans;
    }
};
