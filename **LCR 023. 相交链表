//时间O（m+n）空间O（1）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* hA = headA;
        ListNode* hB = headB;
        while(hA != hB){
            //如果为空去另一个链表的头部，hA,hB已经改变不能用
            // 每次判断当前点是否为空的好处是：避免A B无公共部分，再走完A+B和B+A后，会在nullptr处相遇
            hA = hA == nullptr ? headB : hA -> next; 
            hB = hB == nullptr ? headA : hB -> next;
        }
        return hA;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//记录数组长度，让长的先走，同时到达第一个相交节点。时间O（N）空间O（1）
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == nullptr || headB == nullptr){
            return nullptr;
        }
        ListNode* pA = headA;
        ListNode* pB = headB;
        int n = 0;
        while(pA->next != nullptr){
            n++;
            pA = pA->next;
        }
        while(pB->next != nullptr){
            n--;
            pB = pB->next;
        }
        if(pA != pB){
            return nullptr;
        }else{
            pA = n > 0 ? headA : headB; //谁长谁是pA
            pB = pA == headA ? headB : headA;
            n = abs(n);
            while(n != 0){
                n--;
                pA = pA->next;
            }
            while(pA != pB){
                pA = pA->next;
                pB = pB->next;
            }
        }
        return pA;
    }
};
